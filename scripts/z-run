#!/dev/null




::// debug / ...
::// release / ...
::// dependencies / ...
::// docs / ...
::// cargo / ...
::// workspace / ...
::// sources / ...
::// *




:: debug / check / all :: export -- RUSTC_BOOTSTRAP=1 ;  exec -- "${ZRUN}" ':: cargo / tool' check --workspace --all-targets -- "${@}"
:: debug / build / all :: export -- RUSTC_BOOTSTRAP=1 ;  exec -- "${ZRUN}" ':: cargo / tool' build --workspace --all-targets -- "${@}"

:: release / check / all :: export -- RUSTC_BOOTSTRAP=1 ; exec -- "${ZRUN}" ':: cargo / tool' check --workspace --all-targets --release -- "${@}"
:: release / build / all :: export -- RUSTC_BOOTSTRAP=1 ; exec -- "${ZRUN}" ':: cargo / tool' build --workspace --all-targets --release -- "${@}"


:: debug / check / lib :: exec -- "${ZRUN}" ':: cargo / tool' check --workspace --lib -- "${@}"
:: debug / build / lib :: exec -- "${ZRUN}" ':: cargo / tool' build --workspace --lib -- "${@}"

:: release / build / lib :: exec -- "${ZRUN}" ':: cargo / tool' build --workspace --lib --release -- "${@}"
:: release / check / lib :: exec -- "${ZRUN}" ':: cargo / tool' check --workspace --lib --release -- "${@}"


:: debug / check / tests :: exec -- "${ZRUN}" ':: cargo / tool' check --workspace --tests -- "${@}"
:: debug / build / tests :: exec -- "${ZRUN}" ':: cargo / tool' build --workspace --tests -- "${@}"

:: debug / check / benches :: export -- RUSTC_BOOTSTRAP=1 ; exec -- "${ZRUN}" ':: cargo / tool' check --workspace --benches -- "${@}"
:: debug / build / benches :: export -- RUSTC_BOOTSTRAP=1 ;  exec -- "${ZRUN}" ':: cargo / tool' build --workspace --benches -- "${@}"




:: debug / run / tests / all :: export -- RUST_BACKTRACE=1 ;  exec -- "${ZRUN}" ':: cargo / tool' test --workspace --jobs 1 -- "${@}"
:: debug / run / benches / all :: export -- RUST_BACKTRACE=1 ; exec -- "${ZRUN}" ':: cargo / tool' bench --workspace --jobs 1 -- "${@}"


:: debug / run / tests / package / errors :: export -- RUST_BACKTRACE=1 ; exec -- "${ZRUN}" ':: cargo / tool' test --package vrl-errors --jobs 1 -- "${@}"
:: debug / run / tests / package / cli-arguments :: export -- RUST_BACKTRACE=1 ; exec -- "${ZRUN}" ':: cargo / tool' test --package vrl-cli-arguments --jobs 1 -- "${@}"




:: docs / crate / internals / build :: exec -- "${ZRUN}" ':: cargo / tool' doc --workspace --no-deps --document-private-items "${@}"
:: docs / crate / exports / build :: exec -- "${ZRUN}" ':: cargo / tool' doc --workspace --no-deps "${@}"

:: docs / dependencies / build :: exec -- "${ZRUN}" ':: cargo / tool' doc --workspace "${@}"

:: docs / open :: exec -- x-www guest:volution-rust-libraries open "file://$( exec -- readlink -e -- "./.target/doc/vrl/index.html" )"




:: dependencies / tree :: exec -- "${ZRUN}" ':: cargo / tool' tree "${@}"
:: dependencies / licenses :: exec -- "${ZRUN}" ':: cargo / tool' license --all-features --avoid-build-deps --avoid-dev-deps "${@}"
:: dependencies / update :: exec -- "${ZRUN}" ':: cargo / tool' update --aggressive "${@}"
:: dependencies / outdated :: exec -- "${ZRUN}" ':: cargo / tool' outdated "${@}"
:: dependencies / duplicates :: exec -- "${ZRUN}" ':: cargo / tool' duplicates "${@}"
:: dependencies / audit :: exec -- "${ZRUN}" ':: cargo / tool' audit "${@}"
:: dependencies / geiger :: exec -- "${ZRUN}" ':: cargo / tool' geiger --output-format Ascii "${@}"
:: dependencies / bom :: exec -- "${ZRUN}" ':: cargo / tool' cyclonedx --all --format json "${@}"




<< cargo / tools / install
	test "${#}" -eq 0
	
	_tools=(
			cargo-audit
			cargo-outdated
			cargo-duplicates
			cargo-geiger
			cargo-license
			cargo-cyclonedx
		)
	
	exec -- "${ZRUN}" ':: cargo / tool' install \
			--locked \
			--jobs 1 \
			-- \
			"${_tools[@]}" \
	#
!!




<< cargo / tool
	test "${#}" -ge 1
	_target="$( exec -- readlink -e -- ./.target )"
	_sources="$( exec -- readlink -e -- ./sources )"
	
	export -- CARGO_TARGET_DIR="${_target}"
	
	cd -- "${_sources}/workspace"
	
	exec -- \
		nice -n 19 -- \
	cargo \
		"${@}" \
	#
!!




<< workspace / initialize / rust
	test "${#}" -eq 0
	_outputs="$( exec -- readlink -e -- ./.outputs )"
	
	_target="${_outputs}/${UNAME_NODE}--${UNAME_FINGERPRINT}--${ZRUN_WORKSPACE_IDENTIFIER}"
	_release="${_target}/release"
	_debug="${_target}/debug"
	
	for _folder in "${_target}" "${_release}" "${_debug}" ; do
		if test ! -e "${_folder}" ; then
			mkdir -- "${_folder}"
		fi
	done
	
	ln -s -f -- "${_target}" ./.target
!!


<< workspace / initialize / outputs
	test "${#}" -eq 0
	if test ! -d ./.outputs ; then
		_outputs_store="${TMPDIR:-/tmp}/rust--scratch--${UID}"
		mkdir -- "${_outputs_store}"
		_outputs_store="$( exec -- readlink -e -- "${_outputs_store}" )"
		ln -s -f -T -- "${_outputs_store}" ./.outputs
	fi
!!




<< sources / grep / codes / duplicate
	test "${#}" -eq 0
	_patterns=(
			'\{[0-9a-f]{8}\}'  '\[[0-9a-f]{8}\]'  '0x[0-9a-f]{8}(?=[^0-9a-f]|$)'
			'\{[0-9a-f]{16}\}' '\[[0-9a-f]{16}\]' '0x[0-9a-f]{16}(?=[^0-9a-f]|$)'
			'\{[0-9a-f]{32}\}' '\[[0-9a-f]{32}\]' '0x[0-9a-f]{32}(?=[^0-9a-f]|$)'
		)
	for _pattern in "${_patterns[@]}" ; do
		grep -h -o -i -P -e "${_pattern}" -r -- ./sources/ || true
	done \
	| sort \
	| uniq -d \
	| while read -r -- _token ; do
		grep -F -e "${_token}" --color -H -n -r -- ./sources/
	done
!!


<< sources / grep / codes / invalid
	test "${#}" -eq 0
	_patterns=(
			'\{[0-9a-f]{1,7}\}'   '\[[0-9a-f]{1,7}\]'   '0x[0-9a-f]{1,7}(?=[^0-9a-f]|$)'
			'\{[0-9a-f]{9,15}\}'  '\[[0-9a-f]{9,15}\]'  '0x[0-9a-f]{9,15}(?=[^0-9a-f]|$)'
			'\{[0-9a-f]{17,31}\}' '\[[0-9a-f]{17,31}\]' '0x[0-9a-f]{17,31}(?=[^0-9a-f]|$)'
		)
	for _pattern in "${_patterns[@]}" ; do
		grep -h -o -i -P -e "${_pattern}" -r -- ./sources/ || true
	done \
	| sort \
	| while read -r -- _token ; do
		grep -F -e "${_token}" --color -H -n -r -- ./sources/
	done
!!




&&?? ./.git/.local.z-run

